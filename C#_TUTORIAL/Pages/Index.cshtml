@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<html>
    <head>
        <title>c# tutorial</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
           <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-grid.css" />
            <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
            <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
            <link rel="stylesheet" href="~/css/Style.css" />
        <script>
            const Serach_Menu = () =>{
                let filter = document.getElementById('Search').value.toUpperCase();
                let ul = document.getElementById('Search_ul');
                let li = ul.getElementsByTagName('li');
                for(var i=0;i<li.length;i++)
                {
                    let a = li[i].getElementsByTagName('a')[0];
                    let txtvalue = a.textContent || a.innerHTML;
                    if(txtvalue.toUpperCase().indexOf(filter) > -1)
                    {
                        li[i].style.display = '';
                    }
                    else
                    {
                        li[i].style.display = 'none';
                    }
                }
            }
        </script>
    </head>
    <body>
        <div class="Sidebar">
            <div class="Search">
            <input type="text" class="SearchBar"placeholder="Type Here For Search" id="Search" onkeyup="Serach_Menu()">
            </div>
            <div class="side_Scroll">
            <ul id="Search_ul">
                <li><a  href="~/Tutorial/Introduction"><i></i>Introduction</a></li>
                <li><a  href="~/Tutorial/Top_Level_Stat"><i></i>Top&nbsp;Level&nbsp;Statement</a></li>
                <li><a  href="~/Tutorial/Namespaces">Namespaces</a></li>
                <li><a  href="~/Tutorial/Classes">Classes</a></li>
                <li><a  href="~/Tutorial/Records"><i>Records</a></li>
                <li><a  href="~/Tutorial/Interfaces">Interfaces</a></li>
                <li><a  href="~/Tutorial/Generic">Generic</a></li>
                <li><a  href="~/Tutorial/Anonymous">Anonymous</a></li>
                <li><a  href="~/Tutorial/Class_Struct_Record">Classes&nbsp;Structs&nbsp;Records</a></li>
                <li><a  href="~/Tutorial/Objects">Objects</a></li>
                <li><a  href="~/Tutorial/Inheritance">Inheritance</a></li>
                <li><a  href="~/Tutorial/Polymorphism">Polymorphism</a></li>
                <li><a  href="~/Tutorial/Pattern_Matching">Pattern Matching</a></li>
                <li><a  href="~/Tutorial/Discards">Discards</a></li>
                <li><a  href="~/Tutorial/Exception_Over">Exception Overview</a></li>
                <li><a  href="~/Tutorial/Exception_Use">Use Exception</a></li>
                <li><a  href="~/Tutorial/Exception_Create_Throw">Creating&nbsp;&&nbsp;Throwing&nbsp;Exception</a></li>
                <li><a  href="~/Tutorial/Exception_Compiler">Compiler&nbsp;generated&nbsp;Exceptions</a></li><br>
            </ul>
            </div>
        </div>
        <div class="con">
           <p class="padding"><i> 
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C# is a general-purpose, modern and object-oriented programming language pronounced as “C sharp”.
             It was developed by Microsoft led by Anders Hejlsberg and his team 
             within the .Net initiative and was approved by the European Computer Manufacturers Association (ECMA) and
              International Standards Organization (ISO). C# is among the languages for Common Language Infrastructure and the
             current version of C# is version 7.2. C# is a lot similar to Java syntactically and is easy for the users who
              have knowledge of C, C++ or Java.<br><br>

            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C# is an object-oriented, component-oriented programming language. C# provides language constructs to directly support these concepts, making C# a natural language in which to create and use software components. Since its origin, C# has added features to support new workloads and emerging software design practices. At its core, C# is an object-oriented language. You define types and their behavior.<br><br>
            
            
             
              </i>
        </p>
        </div>
    </body>
</html>